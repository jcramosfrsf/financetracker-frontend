// Utilidad para diagnosticar problemas de conexi√≥n con la API
import axios from 'axios';

const API_BASE_URL = 'http://127.0.0.1:8000';

export const runDiagnostics = async () => {
  const results = {
    serverReachable: false,
    apiEndpointExists: false,
    authenticationWorking: false,
    categoriesEndpointWorking: false,
    errors: []
  };

  try {
    // 1. Verificar si el servidor est√° alcanzable
    console.log('üîç Verificando conectividad del servidor...');
    await axios.get(`${API_BASE_URL}/`, { timeout: 5000 });
    results.serverReachable = true;
    console.log('‚úÖ Servidor alcanzable');
  } catch (error) {
    results.errors.push(`‚ùå Servidor no alcanzable: ${error.message}`);
    console.error('‚ùå Servidor no alcanzable:', error.message);
  }

  try {
    // 2. Verificar si el endpoint de la API existe
    console.log('üîç Verificando endpoint de API...');
    await axios.get(`${API_BASE_URL}/api/`, { timeout: 5000 });
    results.apiEndpointExists = true;
    console.log('‚úÖ Endpoint de API disponible');
  } catch (error) {
    results.errors.push(`‚ùå Endpoint de API no disponible: ${error.response?.status || error.message}`);
    console.error('‚ùå Endpoint de API no disponible:', error.response?.status || error.message);
  }

  try {
    // 3. Verificar endpoint de categor√≠as sin autenticaci√≥n
    console.log('üîç Verificando endpoint de categor√≠as...');
    const response = await axios.get(`${API_BASE_URL}/api/categories/`, { timeout: 5000 });
    results.categoriesEndpointWorking = true;
    console.log('‚úÖ Endpoint de categor√≠as funcional');
  } catch (error) {
    if (error.response?.status === 401) {
      results.errors.push('üîê Endpoint de categor√≠as requiere autenticaci√≥n (esto es normal)');
      console.log('üîê Endpoint de categor√≠as requiere autenticaci√≥n (esto es normal)');
    } else {
      results.errors.push(`‚ùå Endpoint de categor√≠as con error: ${error.response?.status || error.message}`);
      console.error('‚ùå Endpoint de categor√≠as con error:', error.response?.status || error.message);
    }
  }

  // 4. Verificar token de autenticaci√≥n
  const token = localStorage.getItem('token');
  if (token) {
    try {
      console.log('üîç Verificando autenticaci√≥n...');
      await axios.get(`${API_BASE_URL}/api/categories/`, {
        headers: { Authorization: `Token ${token}` },
        timeout: 5000
      });
      results.authenticationWorking = true;
      console.log('‚úÖ Autenticaci√≥n funcionando correctamente');
    } catch (error) {
      if (error.response?.status === 401) {
        results.errors.push('‚ùå Token de autenticaci√≥n inv√°lido o expirado');
        console.error('‚ùå Token de autenticaci√≥n inv√°lido o expirado');
      } else {
        results.errors.push(`‚ùå Error de autenticaci√≥n: ${error.response?.status || error.message}`);
        console.error('‚ùå Error de autenticaci√≥n:', error.response?.status || error.message);
      }
    }
  } else {
    results.errors.push('‚ùå No hay token de autenticaci√≥n almacenado');
    console.error('‚ùå No hay token de autenticaci√≥n almacenado');
  }

  return results;
};

export const printDiagnosticReport = (results) => {
  console.log('\nüìä REPORTE DE DIAGN√ìSTICO:');
  console.log('================================');
  console.log(`Servidor alcanzable: ${results.serverReachable ? '‚úÖ' : '‚ùå'}`);
  console.log(`API disponible: ${results.apiEndpointExists ? '‚úÖ' : '‚ùå'}`);
  console.log(`Categor√≠as funcionando: ${results.categoriesEndpointWorking ? '‚úÖ' : '‚ùå'}`);
  console.log(`Autenticaci√≥n funcionando: ${results.authenticationWorking ? '‚úÖ' : '‚ùå'}`);
  
  if (results.errors.length > 0) {
    console.log('\nüö® ERRORES ENCONTRADOS:');
    results.errors.forEach(error => console.log(error));
  }
  
  console.log('\nüí° RECOMENDACIONES:');
  if (!results.serverReachable) {
    console.log('- Verifica que el servidor Django est√© ejecut√°ndose en http://127.0.0.1:8000');
    console.log('- Ejecuta: python manage.py runserver');
  }
  if (!results.authenticationWorking && localStorage.getItem('token')) {
    console.log('- Intenta cerrar sesi√≥n e iniciar sesi√≥n nuevamente');
    console.log('- Verifica que el token sea v√°lido');
  }
  if (!localStorage.getItem('token')) {
    console.log('- Inicia sesi√≥n para obtener un token de autenticaci√≥n');
  }
  console.log('================================\n');
};